{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from category_encoders.one_hot import OneHotEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "treino = pd.read_csv('C:/Users/vitin/Downloads/train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "teste = pd.read_csv('C:/Users/vitin/Downloads/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [],
   "source": [
    "for pos in lista_aplicar:\n",
    "    teste[pos] = treino[pos]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1459 entries, 0 to 1458\n",
      "Data columns (total 80 columns):\n",
      "Id               1459 non-null int64\n",
      "MSSubClass       1459 non-null int64\n",
      "MSZoning         1455 non-null object\n",
      "LotFrontage      1232 non-null float64\n",
      "LotArea          1459 non-null int64\n",
      "Street           1459 non-null object\n",
      "Alley            107 non-null object\n",
      "LotShape         1459 non-null object\n",
      "LandContour      1459 non-null object\n",
      "Utilities        1457 non-null object\n",
      "LotConfig        1459 non-null object\n",
      "LandSlope        1459 non-null object\n",
      "Neighborhood     1459 non-null object\n",
      "Condition1       1459 non-null object\n",
      "Condition2       1459 non-null object\n",
      "BldgType         1459 non-null object\n",
      "HouseStyle       1459 non-null object\n",
      "OverallQual      1459 non-null int64\n",
      "OverallCond      1459 non-null int64\n",
      "YearBuilt        1459 non-null int64\n",
      "YearRemodAdd     1459 non-null int64\n",
      "RoofStyle        1459 non-null object\n",
      "RoofMatl         1459 non-null object\n",
      "Exterior1st      1458 non-null object\n",
      "Exterior2nd      1458 non-null object\n",
      "MasVnrType       1443 non-null object\n",
      "MasVnrArea       1444 non-null float64\n",
      "ExterQual        1459 non-null object\n",
      "ExterCond        1459 non-null object\n",
      "Foundation       1459 non-null object\n",
      "BsmtQual         1415 non-null object\n",
      "BsmtCond         1414 non-null object\n",
      "BsmtExposure     1415 non-null object\n",
      "BsmtFinType1     1417 non-null object\n",
      "BsmtFinSF1       1459 non-null int64\n",
      "BsmtFinType2     1417 non-null object\n",
      "BsmtFinSF2       1459 non-null int64\n",
      "BsmtUnfSF        1459 non-null int64\n",
      "TotalBsmtSF      1459 non-null int64\n",
      "Heating          1459 non-null object\n",
      "HeatingQC        1459 non-null object\n",
      "CentralAir       1459 non-null object\n",
      "Electrical       1459 non-null object\n",
      "1stFlrSF         1459 non-null int64\n",
      "2ndFlrSF         1459 non-null int64\n",
      "LowQualFinSF     1459 non-null int64\n",
      "GrLivArea        1459 non-null int64\n",
      "BsmtFullBath     1459 non-null int64\n",
      "BsmtHalfBath     1459 non-null int64\n",
      "FullBath         1459 non-null int64\n",
      "HalfBath         1459 non-null int64\n",
      "BedroomAbvGr     1459 non-null int64\n",
      "KitchenAbvGr     1459 non-null int64\n",
      "KitchenQual      1458 non-null object\n",
      "TotRmsAbvGrd     1459 non-null int64\n",
      "Functional       1457 non-null object\n",
      "Fireplaces       1459 non-null int64\n",
      "FireplaceQu      729 non-null object\n",
      "GarageType       1383 non-null object\n",
      "GarageYrBlt      1381 non-null float64\n",
      "GarageFinish     1381 non-null object\n",
      "GarageCars       1459 non-null int64\n",
      "GarageArea       1459 non-null int64\n",
      "GarageQual       1381 non-null object\n",
      "GarageCond       1381 non-null object\n",
      "PavedDrive       1459 non-null object\n",
      "WoodDeckSF       1459 non-null int64\n",
      "OpenPorchSF      1459 non-null int64\n",
      "EnclosedPorch    1459 non-null int64\n",
      "3SsnPorch        1459 non-null int64\n",
      "ScreenPorch      1459 non-null int64\n",
      "PoolArea         1459 non-null int64\n",
      "PoolQC           3 non-null object\n",
      "Fence            290 non-null object\n",
      "MiscFeature      51 non-null object\n",
      "MiscVal          1459 non-null int64\n",
      "MoSold           1459 non-null int64\n",
      "YrSold           1459 non-null int64\n",
      "SaleType         1458 non-null object\n",
      "SaleCondition    1459 non-null object\n",
      "dtypes: float64(3), int64(34), object(43)\n",
      "memory usage: 912.0+ KB\n"
     ]
    }
   ],
   "source": [
    "teste.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "categ_teste = ['object']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "categ = teste.select_dtypes(include=categ_teste)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities',\n",
       "       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n",
       "       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n",
       "       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n",
       "       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n",
       "       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n",
       "       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual',\n",
       "       'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature',\n",
       "       'SaleType', 'SaleCondition'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categ.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "encoder = OneHotEncoder(cols = ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities',\n",
    "       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n",
    "       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n",
    "       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n",
    "       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n",
    "       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n",
    "       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual',\n",
    "       'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature',\n",
    "       'SaleType', 'SaleCondition'], use_cat_names = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_teste = encoder.fit_transform(teste)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "lista = list(df_teste.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_treino = treino.select_dtypes(include='int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "lista_treino = list(df_treino.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 35 columns):\n",
      "Id               1460 non-null int64\n",
      "MSSubClass       1460 non-null int64\n",
      "LotArea          1460 non-null int64\n",
      "OverallQual      1460 non-null int64\n",
      "OverallCond      1460 non-null int64\n",
      "YearBuilt        1460 non-null int64\n",
      "YearRemodAdd     1460 non-null int64\n",
      "BsmtFinSF1       1460 non-null int64\n",
      "BsmtFinSF2       1460 non-null int64\n",
      "BsmtUnfSF        1460 non-null int64\n",
      "TotalBsmtSF      1460 non-null int64\n",
      "1stFlrSF         1460 non-null int64\n",
      "2ndFlrSF         1460 non-null int64\n",
      "LowQualFinSF     1460 non-null int64\n",
      "GrLivArea        1460 non-null int64\n",
      "BsmtFullBath     1460 non-null int64\n",
      "BsmtHalfBath     1460 non-null int64\n",
      "FullBath         1460 non-null int64\n",
      "HalfBath         1460 non-null int64\n",
      "BedroomAbvGr     1460 non-null int64\n",
      "KitchenAbvGr     1460 non-null int64\n",
      "TotRmsAbvGrd     1460 non-null int64\n",
      "Fireplaces       1460 non-null int64\n",
      "GarageCars       1460 non-null int64\n",
      "GarageArea       1460 non-null int64\n",
      "WoodDeckSF       1460 non-null int64\n",
      "OpenPorchSF      1460 non-null int64\n",
      "EnclosedPorch    1460 non-null int64\n",
      "3SsnPorch        1460 non-null int64\n",
      "ScreenPorch      1460 non-null int64\n",
      "PoolArea         1460 non-null int64\n",
      "MiscVal          1460 non-null int64\n",
      "MoSold           1460 non-null int64\n",
      "YrSold           1460 non-null int64\n",
      "SalePrice        1460 non-null int64\n",
      "dtypes: int64(35)\n",
      "memory usage: 399.3 KB\n"
     ]
    }
   ],
   "source": [
    "df_treino.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_treino = encoder.fit_transform(treino)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtypes = ['int64']\n",
    "df_treino = df_treino.select_dtypes(include=dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.info of       MSSubClass  MSZoning_RH  MSZoning_RL  MSZoning_RM  MSZoning_FV  \\\n",
       "0             60            0            1            0            0   \n",
       "1             20            0            1            0            0   \n",
       "2             60            0            1            0            0   \n",
       "3             70            0            1            0            0   \n",
       "4             60            0            1            0            0   \n",
       "...          ...          ...          ...          ...          ...   \n",
       "1455          60            0            1            0            0   \n",
       "1456          20            0            1            0            0   \n",
       "1457          70            0            1            0            0   \n",
       "1458          20            0            1            0            0   \n",
       "1459          20            0            1            0            0   \n",
       "\n",
       "      MSZoning_C (all)  LotArea  Street_Pave  Street_Grvl  Alley_Pave  ...  \\\n",
       "0                    0     8450            1            0           0  ...   \n",
       "1                    0     9600            1            0           0  ...   \n",
       "2                    0    11250            1            0           0  ...   \n",
       "3                    0     9550            1            0           0  ...   \n",
       "4                    0    14260            1            0           0  ...   \n",
       "...                ...      ...          ...          ...         ...  ...   \n",
       "1455                 0     7917            1            0           0  ...   \n",
       "1456                 0    13175            1            0           0  ...   \n",
       "1457                 0     9042            1            0           0  ...   \n",
       "1458                 0     9717            1            0           0  ...   \n",
       "1459                 0     9937            1            0           0  ...   \n",
       "\n",
       "      SaleType_Con  SaleType_ConLw  SaleType_ConLI  SaleType_CWD  \\\n",
       "0                0               0               0             0   \n",
       "1                0               0               0             0   \n",
       "2                0               0               0             0   \n",
       "3                0               0               0             0   \n",
       "4                0               0               0             0   \n",
       "...            ...             ...             ...           ...   \n",
       "1455             0               0               0             0   \n",
       "1456             0               0               0             0   \n",
       "1457             0               0               0             0   \n",
       "1458             0               0               0             0   \n",
       "1459             0               0               0             0   \n",
       "\n",
       "      SaleCondition_Normal  SaleCondition_Partial  SaleCondition_Abnorml  \\\n",
       "0                        1                      0                      0   \n",
       "1                        1                      0                      0   \n",
       "2                        1                      0                      0   \n",
       "3                        0                      0                      1   \n",
       "4                        1                      0                      0   \n",
       "...                    ...                    ...                    ...   \n",
       "1455                     1                      0                      0   \n",
       "1456                     1                      0                      0   \n",
       "1457                     1                      0                      0   \n",
       "1458                     1                      0                      0   \n",
       "1459                     1                      0                      0   \n",
       "\n",
       "      SaleCondition_Family  SaleCondition_Alloca  SaleCondition_AdjLand  \n",
       "0                        0                     0                      0  \n",
       "1                        0                     0                      0  \n",
       "2                        0                     0                      0  \n",
       "3                        0                     0                      0  \n",
       "4                        0                     0                      0  \n",
       "...                    ...                   ...                    ...  \n",
       "1455                     0                     0                      0  \n",
       "1456                     0                     0                      0  \n",
       "1457                     0                     0                      0  \n",
       "1458                     0                     0                      0  \n",
       "1459                     0                     0                      0  \n",
       "\n",
       "[1460 rows x 261 columns]>"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "lista = list(df_teste.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Id',\n",
       " 'MSSubClass',\n",
       " 'MSZoning_RH',\n",
       " 'MSZoning_RL',\n",
       " 'MSZoning_RM',\n",
       " 'MSZoning_FV',\n",
       " 'MSZoning_C (all)',\n",
       " 'MSZoning_nan',\n",
       " 'LotFrontage',\n",
       " 'LotArea',\n",
       " 'Street_Pave',\n",
       " 'Street_Grvl',\n",
       " 'Alley_nan',\n",
       " 'Alley_Pave',\n",
       " 'Alley_Grvl',\n",
       " 'LotShape_Reg',\n",
       " 'LotShape_IR1',\n",
       " 'LotShape_IR2',\n",
       " 'LotShape_IR3',\n",
       " 'LandContour_Lvl',\n",
       " 'LandContour_HLS',\n",
       " 'LandContour_Bnk',\n",
       " 'LandContour_Low',\n",
       " 'Utilities_AllPub',\n",
       " 'Utilities_nan',\n",
       " 'LotConfig_Inside',\n",
       " 'LotConfig_Corner',\n",
       " 'LotConfig_FR2',\n",
       " 'LotConfig_CulDSac',\n",
       " 'LotConfig_FR3',\n",
       " 'LandSlope_Gtl',\n",
       " 'LandSlope_Mod',\n",
       " 'LandSlope_Sev',\n",
       " 'Neighborhood_NAmes',\n",
       " 'Neighborhood_Gilbert',\n",
       " 'Neighborhood_StoneBr',\n",
       " 'Neighborhood_BrDale',\n",
       " 'Neighborhood_NPkVill',\n",
       " 'Neighborhood_NridgHt',\n",
       " 'Neighborhood_Blmngtn',\n",
       " 'Neighborhood_NoRidge',\n",
       " 'Neighborhood_Somerst',\n",
       " 'Neighborhood_SawyerW',\n",
       " 'Neighborhood_Sawyer',\n",
       " 'Neighborhood_NWAmes',\n",
       " 'Neighborhood_OldTown',\n",
       " 'Neighborhood_BrkSide',\n",
       " 'Neighborhood_ClearCr',\n",
       " 'Neighborhood_SWISU',\n",
       " 'Neighborhood_Edwards',\n",
       " 'Neighborhood_CollgCr',\n",
       " 'Neighborhood_Crawfor',\n",
       " 'Neighborhood_Blueste',\n",
       " 'Neighborhood_IDOTRR',\n",
       " 'Neighborhood_Mitchel',\n",
       " 'Neighborhood_Timber',\n",
       " 'Neighborhood_MeadowV',\n",
       " 'Neighborhood_Veenker',\n",
       " 'Condition1_Feedr',\n",
       " 'Condition1_Norm',\n",
       " 'Condition1_PosN',\n",
       " 'Condition1_RRNe',\n",
       " 'Condition1_Artery',\n",
       " 'Condition1_RRNn',\n",
       " 'Condition1_PosA',\n",
       " 'Condition1_RRAn',\n",
       " 'Condition1_RRAe',\n",
       " 'Condition2_Norm',\n",
       " 'Condition2_Feedr',\n",
       " 'Condition2_PosA',\n",
       " 'Condition2_PosN',\n",
       " 'Condition2_Artery',\n",
       " 'BldgType_1Fam',\n",
       " 'BldgType_TwnhsE',\n",
       " 'BldgType_Twnhs',\n",
       " 'BldgType_Duplex',\n",
       " 'BldgType_2fmCon',\n",
       " 'HouseStyle_1Story',\n",
       " 'HouseStyle_2Story',\n",
       " 'HouseStyle_SLvl',\n",
       " 'HouseStyle_1.5Fin',\n",
       " 'HouseStyle_SFoyer',\n",
       " 'HouseStyle_2.5Unf',\n",
       " 'HouseStyle_1.5Unf',\n",
       " 'OverallQual',\n",
       " 'OverallCond',\n",
       " 'YearBuilt',\n",
       " 'YearRemodAdd',\n",
       " 'RoofStyle_Gable',\n",
       " 'RoofStyle_Hip',\n",
       " 'RoofStyle_Gambrel',\n",
       " 'RoofStyle_Flat',\n",
       " 'RoofStyle_Mansard',\n",
       " 'RoofStyle_Shed',\n",
       " 'RoofMatl_CompShg',\n",
       " 'RoofMatl_Tar&Grv',\n",
       " 'RoofMatl_WdShake',\n",
       " 'RoofMatl_WdShngl',\n",
       " 'Exterior1st_VinylSd',\n",
       " 'Exterior1st_Wd Sdng',\n",
       " 'Exterior1st_HdBoard',\n",
       " 'Exterior1st_Plywood',\n",
       " 'Exterior1st_MetalSd',\n",
       " 'Exterior1st_CemntBd',\n",
       " 'Exterior1st_WdShing',\n",
       " 'Exterior1st_BrkFace',\n",
       " 'Exterior1st_AsbShng',\n",
       " 'Exterior1st_BrkComm',\n",
       " 'Exterior1st_Stucco',\n",
       " 'Exterior1st_AsphShn',\n",
       " 'Exterior1st_nan',\n",
       " 'Exterior1st_CBlock',\n",
       " 'Exterior2nd_VinylSd',\n",
       " 'Exterior2nd_Wd Sdng',\n",
       " 'Exterior2nd_HdBoard',\n",
       " 'Exterior2nd_Plywood',\n",
       " 'Exterior2nd_MetalSd',\n",
       " 'Exterior2nd_Brk Cmn',\n",
       " 'Exterior2nd_CmentBd',\n",
       " 'Exterior2nd_ImStucc',\n",
       " 'Exterior2nd_Wd Shng',\n",
       " 'Exterior2nd_AsbShng',\n",
       " 'Exterior2nd_Stucco',\n",
       " 'Exterior2nd_CBlock',\n",
       " 'Exterior2nd_BrkFace',\n",
       " 'Exterior2nd_AsphShn',\n",
       " 'Exterior2nd_nan',\n",
       " 'Exterior2nd_Stone',\n",
       " 'MasVnrType_None',\n",
       " 'MasVnrType_BrkFace',\n",
       " 'MasVnrType_Stone',\n",
       " 'MasVnrType_BrkCmn',\n",
       " 'MasVnrType_nan',\n",
       " 'MasVnrArea',\n",
       " 'ExterQual_TA',\n",
       " 'ExterQual_Gd',\n",
       " 'ExterQual_Ex',\n",
       " 'ExterQual_Fa',\n",
       " 'ExterCond_TA',\n",
       " 'ExterCond_Gd',\n",
       " 'ExterCond_Fa',\n",
       " 'ExterCond_Po',\n",
       " 'ExterCond_Ex',\n",
       " 'Foundation_CBlock',\n",
       " 'Foundation_PConc',\n",
       " 'Foundation_BrkTil',\n",
       " 'Foundation_Stone',\n",
       " 'Foundation_Slab',\n",
       " 'Foundation_Wood',\n",
       " 'BsmtQual_TA',\n",
       " 'BsmtQual_Gd',\n",
       " 'BsmtQual_Ex',\n",
       " 'BsmtQual_Fa',\n",
       " 'BsmtQual_nan',\n",
       " 'BsmtCond_TA',\n",
       " 'BsmtCond_Po',\n",
       " 'BsmtCond_Fa',\n",
       " 'BsmtCond_Gd',\n",
       " 'BsmtCond_nan',\n",
       " 'BsmtExposure_No',\n",
       " 'BsmtExposure_Gd',\n",
       " 'BsmtExposure_Mn',\n",
       " 'BsmtExposure_Av',\n",
       " 'BsmtExposure_nan',\n",
       " 'BsmtFinType1_Rec',\n",
       " 'BsmtFinType1_ALQ',\n",
       " 'BsmtFinType1_GLQ',\n",
       " 'BsmtFinType1_Unf',\n",
       " 'BsmtFinType1_BLQ',\n",
       " 'BsmtFinType1_LwQ',\n",
       " 'BsmtFinType1_nan',\n",
       " 'BsmtFinSF1',\n",
       " 'BsmtFinType2_LwQ',\n",
       " 'BsmtFinType2_Unf',\n",
       " 'BsmtFinType2_Rec',\n",
       " 'BsmtFinType2_BLQ',\n",
       " 'BsmtFinType2_GLQ',\n",
       " 'BsmtFinType2_ALQ',\n",
       " 'BsmtFinType2_nan',\n",
       " 'BsmtFinSF2',\n",
       " 'BsmtUnfSF',\n",
       " 'TotalBsmtSF',\n",
       " 'Heating_GasA',\n",
       " 'Heating_GasW',\n",
       " 'Heating_Grav',\n",
       " 'Heating_Wall',\n",
       " 'HeatingQC_TA',\n",
       " 'HeatingQC_Gd',\n",
       " 'HeatingQC_Ex',\n",
       " 'HeatingQC_Fa',\n",
       " 'HeatingQC_Po',\n",
       " 'CentralAir_Y',\n",
       " 'CentralAir_N',\n",
       " 'Electrical_SBrkr',\n",
       " 'Electrical_FuseA',\n",
       " 'Electrical_FuseF',\n",
       " 'Electrical_FuseP',\n",
       " '1stFlrSF',\n",
       " '2ndFlrSF',\n",
       " 'LowQualFinSF',\n",
       " 'GrLivArea',\n",
       " 'BsmtFullBath',\n",
       " 'BsmtHalfBath',\n",
       " 'FullBath',\n",
       " 'HalfBath',\n",
       " 'BedroomAbvGr',\n",
       " 'KitchenAbvGr',\n",
       " 'KitchenQual_TA',\n",
       " 'KitchenQual_Gd',\n",
       " 'KitchenQual_Ex',\n",
       " 'KitchenQual_Fa',\n",
       " 'KitchenQual_nan',\n",
       " 'TotRmsAbvGrd',\n",
       " 'Functional_Typ',\n",
       " 'Functional_Min2',\n",
       " 'Functional_Min1',\n",
       " 'Functional_Mod',\n",
       " 'Functional_Maj1',\n",
       " 'Functional_Sev',\n",
       " 'Functional_Maj2',\n",
       " 'Functional_nan',\n",
       " 'Fireplaces',\n",
       " 'FireplaceQu_nan',\n",
       " 'FireplaceQu_TA',\n",
       " 'FireplaceQu_Gd',\n",
       " 'FireplaceQu_Po',\n",
       " 'FireplaceQu_Fa',\n",
       " 'FireplaceQu_Ex',\n",
       " 'GarageType_Attchd',\n",
       " 'GarageType_Detchd',\n",
       " 'GarageType_BuiltIn',\n",
       " 'GarageType_nan',\n",
       " 'GarageType_Basment',\n",
       " 'GarageType_2Types',\n",
       " 'GarageType_CarPort',\n",
       " 'GarageYrBlt',\n",
       " 'GarageFinish_Unf',\n",
       " 'GarageFinish_Fin',\n",
       " 'GarageFinish_RFn',\n",
       " 'GarageFinish_nan',\n",
       " 'GarageCars',\n",
       " 'GarageArea',\n",
       " 'GarageQual_TA',\n",
       " 'GarageQual_nan',\n",
       " 'GarageQual_Fa',\n",
       " 'GarageQual_Gd',\n",
       " 'GarageQual_Po',\n",
       " 'GarageCond_TA',\n",
       " 'GarageCond_nan',\n",
       " 'GarageCond_Fa',\n",
       " 'GarageCond_Gd',\n",
       " 'GarageCond_Po',\n",
       " 'GarageCond_Ex',\n",
       " 'PavedDrive_Y',\n",
       " 'PavedDrive_N',\n",
       " 'PavedDrive_P',\n",
       " 'WoodDeckSF',\n",
       " 'OpenPorchSF',\n",
       " 'EnclosedPorch',\n",
       " '3SsnPorch',\n",
       " 'ScreenPorch',\n",
       " 'PoolArea',\n",
       " 'PoolQC_nan',\n",
       " 'PoolQC_Ex',\n",
       " 'PoolQC_Gd',\n",
       " 'Fence_MnPrv',\n",
       " 'Fence_nan',\n",
       " 'Fence_GdPrv',\n",
       " 'Fence_GdWo',\n",
       " 'Fence_MnWw',\n",
       " 'MiscFeature_nan',\n",
       " 'MiscFeature_Gar2',\n",
       " 'MiscFeature_Shed',\n",
       " 'MiscFeature_Othr',\n",
       " 'MiscVal',\n",
       " 'MoSold',\n",
       " 'YrSold',\n",
       " 'SaleType_WD',\n",
       " 'SaleType_COD',\n",
       " 'SaleType_New',\n",
       " 'SaleType_ConLD',\n",
       " 'SaleType_Oth',\n",
       " 'SaleType_Con',\n",
       " 'SaleType_ConLw',\n",
       " 'SaleType_ConLI',\n",
       " 'SaleType_CWD',\n",
       " 'SaleType_nan',\n",
       " 'SaleCondition_Normal',\n",
       " 'SaleCondition_Partial',\n",
       " 'SaleCondition_Abnorml',\n",
       " 'SaleCondition_Family',\n",
       " 'SaleCondition_Alloca',\n",
       " 'SaleCondition_AdjLand']"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lista"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df_treino[['MSSubClass',\n",
    " 'MSZoning_RH',\n",
    " 'MSZoning_RL',\n",
    " 'MSZoning_RM',\n",
    " 'MSZoning_FV',\n",
    " 'MSZoning_C (all)',\n",
    " 'LotArea',\n",
    " 'Street_Pave',\n",
    " 'Street_Grvl',\n",
    " 'Alley_Pave',\n",
    " 'Alley_Grvl',\n",
    " 'LotShape_Reg',\n",
    " 'LotShape_IR1',\n",
    " 'LotShape_IR2',\n",
    " 'LotShape_IR3',\n",
    " 'LandContour_Lvl',\n",
    " 'LandContour_HLS',\n",
    " 'LandContour_Bnk',\n",
    " 'LandContour_Low',\n",
    " 'Utilities_AllPub',\n",
    " 'LotConfig_Inside',\n",
    " 'LotConfig_Corner',\n",
    " 'LotConfig_FR2',\n",
    " 'LotConfig_CulDSac',\n",
    " 'LotConfig_FR3',\n",
    " 'LandSlope_Gtl',\n",
    " 'LandSlope_Mod',\n",
    " 'LandSlope_Sev',\n",
    " 'Neighborhood_NAmes',\n",
    " 'Neighborhood_Gilbert',\n",
    " 'Neighborhood_StoneBr',\n",
    " 'Neighborhood_BrDale',\n",
    " 'Neighborhood_NPkVill',\n",
    " 'Neighborhood_NridgHt',\n",
    " 'Neighborhood_Blmngtn',\n",
    " 'Neighborhood_NoRidge',\n",
    " 'Neighborhood_Somerst',\n",
    " 'Neighborhood_SawyerW',\n",
    " 'Neighborhood_Sawyer',\n",
    " 'Neighborhood_NWAmes',\n",
    " 'Neighborhood_OldTown',\n",
    " 'Neighborhood_BrkSide',\n",
    " 'Neighborhood_ClearCr',\n",
    " 'Neighborhood_SWISU',\n",
    " 'Neighborhood_Edwards',\n",
    " 'Neighborhood_CollgCr',\n",
    " 'Neighborhood_Crawfor',\n",
    " 'Neighborhood_Blueste',\n",
    " 'Neighborhood_IDOTRR',\n",
    " 'Neighborhood_Mitchel',\n",
    " 'Neighborhood_Timber',\n",
    " 'Neighborhood_MeadowV',\n",
    " 'Neighborhood_Veenker',\n",
    " 'Condition1_Feedr',\n",
    " 'Condition1_Norm',\n",
    " 'Condition1_PosN',\n",
    " 'Condition1_RRNe',\n",
    " 'Condition1_Artery',\n",
    " 'Condition1_RRNn',\n",
    " 'Condition1_PosA',\n",
    " 'Condition1_RRAn',\n",
    " 'Condition1_RRAe',\n",
    " 'Condition2_Norm',\n",
    " 'Condition2_Feedr',\n",
    " 'Condition2_PosA',\n",
    " 'Condition2_PosN',\n",
    " 'Condition2_Artery',\n",
    " 'BldgType_1Fam',\n",
    " 'BldgType_TwnhsE',\n",
    " 'BldgType_Twnhs',\n",
    " 'BldgType_Duplex',\n",
    " 'BldgType_2fmCon',\n",
    " 'HouseStyle_1Story',\n",
    " 'HouseStyle_2Story',\n",
    " 'HouseStyle_SLvl',\n",
    " 'HouseStyle_1.5Fin',\n",
    " 'HouseStyle_SFoyer',\n",
    " 'HouseStyle_2.5Unf',\n",
    " 'HouseStyle_1.5Unf',\n",
    " 'OverallQual',\n",
    " 'OverallCond',\n",
    " 'YearBuilt',\n",
    " 'YearRemodAdd',\n",
    " 'RoofStyle_Gable',\n",
    " 'RoofStyle_Hip',\n",
    " 'RoofStyle_Gambrel',\n",
    " 'RoofStyle_Flat',\n",
    " 'RoofStyle_Mansard',\n",
    " 'RoofStyle_Shed',\n",
    " 'RoofMatl_CompShg',\n",
    " 'RoofMatl_Tar&Grv',\n",
    " 'RoofMatl_WdShake',\n",
    " 'RoofMatl_WdShngl',\n",
    " 'Exterior1st_VinylSd',\n",
    " 'Exterior1st_Wd Sdng',\n",
    " 'Exterior1st_HdBoard',\n",
    " 'Exterior1st_Plywood',\n",
    " 'Exterior1st_MetalSd',\n",
    " 'Exterior1st_CemntBd',\n",
    " 'Exterior1st_WdShing',\n",
    " 'Exterior1st_BrkFace',\n",
    " 'Exterior1st_AsbShng',\n",
    " 'Exterior1st_BrkComm',\n",
    " 'Exterior1st_Stucco',\n",
    " 'Exterior1st_AsphShn',\n",
    " 'Exterior1st_CBlock',\n",
    " 'Exterior2nd_VinylSd',\n",
    " 'Exterior2nd_Wd Sdng',\n",
    " 'Exterior2nd_HdBoard',\n",
    " 'Exterior2nd_Plywood',\n",
    " 'Exterior2nd_MetalSd',\n",
    " 'Exterior2nd_Brk Cmn',\n",
    " 'Exterior2nd_CmentBd',\n",
    " 'Exterior2nd_ImStucc',\n",
    " 'Exterior2nd_Wd Shng',\n",
    " 'Exterior2nd_AsbShng',\n",
    " 'Exterior2nd_Stucco',\n",
    " 'Exterior2nd_CBlock',\n",
    " 'Exterior2nd_BrkFace',\n",
    " 'Exterior2nd_AsphShn',\n",
    " 'Exterior2nd_Stone',\n",
    " 'MasVnrType_None',\n",
    " 'MasVnrType_BrkFace',\n",
    " 'MasVnrType_Stone',\n",
    " 'MasVnrType_BrkCmn',\n",
    " 'ExterQual_TA',\n",
    " 'ExterQual_Gd',\n",
    " 'ExterQual_Ex',\n",
    " 'ExterQual_Fa',\n",
    " 'ExterCond_TA',\n",
    " 'ExterCond_Gd',\n",
    " 'ExterCond_Fa',\n",
    " 'ExterCond_Po',\n",
    " 'ExterCond_Ex',\n",
    " 'Foundation_CBlock',\n",
    " 'Foundation_PConc',\n",
    " 'Foundation_BrkTil',\n",
    " 'Foundation_Stone',\n",
    " 'Foundation_Slab',\n",
    " 'Foundation_Wood',\n",
    " 'BsmtQual_TA',\n",
    " 'BsmtQual_Gd',\n",
    " 'BsmtQual_Ex',\n",
    " 'BsmtQual_Fa',\n",
    " 'BsmtCond_TA',\n",
    " 'BsmtCond_Po',\n",
    " 'BsmtCond_Fa',\n",
    " 'BsmtCond_Gd',\n",
    " 'BsmtExposure_No',\n",
    " 'BsmtExposure_Gd',\n",
    " 'BsmtExposure_Mn',\n",
    " 'BsmtExposure_Av',\n",
    " 'BsmtFinType1_Rec',\n",
    " 'BsmtFinType1_ALQ',\n",
    " 'BsmtFinType1_GLQ',\n",
    " 'BsmtFinType1_Unf',\n",
    " 'BsmtFinType1_BLQ',\n",
    " 'BsmtFinType1_LwQ',\n",
    " 'BsmtFinSF1',\n",
    " 'BsmtFinType2_LwQ',\n",
    " 'BsmtFinType2_Unf',\n",
    " 'BsmtFinType2_Rec',\n",
    " 'BsmtFinType2_BLQ',\n",
    " 'BsmtFinType2_GLQ',\n",
    " 'BsmtFinType2_ALQ',\n",
    " 'BsmtFinSF2',\n",
    " 'BsmtUnfSF',\n",
    " 'TotalBsmtSF',\n",
    " 'Heating_GasA',\n",
    " 'Heating_GasW',\n",
    " 'Heating_Grav',\n",
    " 'Heating_Wall',\n",
    " 'HeatingQC_TA',\n",
    " 'HeatingQC_Gd',\n",
    " 'HeatingQC_Ex',\n",
    " 'HeatingQC_Fa',\n",
    " 'HeatingQC_Po',\n",
    " 'CentralAir_Y',\n",
    " 'CentralAir_N',\n",
    " 'Electrical_SBrkr',\n",
    " 'Electrical_FuseA',\n",
    " 'Electrical_FuseF',\n",
    " 'Electrical_FuseP',\n",
    " '1stFlrSF',\n",
    " '2ndFlrSF',\n",
    " 'LowQualFinSF',\n",
    " 'GrLivArea',\n",
    " 'BsmtFullBath',\n",
    " 'BsmtHalfBath',\n",
    " 'FullBath',\n",
    " 'HalfBath',\n",
    " 'BedroomAbvGr',\n",
    " 'KitchenAbvGr',\n",
    " 'KitchenQual_TA',\n",
    " 'KitchenQual_Gd',\n",
    " 'KitchenQual_Ex',\n",
    " 'KitchenQual_Fa',\n",
    " 'TotRmsAbvGrd',\n",
    " 'Functional_Typ',\n",
    " 'Functional_Min2',\n",
    " 'Functional_Min1',\n",
    " 'Functional_Mod',\n",
    " 'Functional_Maj1',\n",
    " 'Functional_Sev',\n",
    " 'Functional_Maj2',\n",
    " 'Fireplaces',\n",
    " 'FireplaceQu_TA',\n",
    " 'FireplaceQu_Gd',\n",
    " 'FireplaceQu_Po',\n",
    " 'FireplaceQu_Fa',\n",
    " 'FireplaceQu_Ex',\n",
    " 'GarageType_Attchd',\n",
    " 'GarageType_Detchd',\n",
    " 'GarageType_BuiltIn',\n",
    " 'GarageType_Basment',\n",
    " 'GarageType_2Types',\n",
    " 'GarageType_CarPort',\n",
    " 'GarageFinish_Unf',\n",
    " 'GarageFinish_Fin',\n",
    " 'GarageFinish_RFn',\n",
    " 'GarageCars',\n",
    " 'GarageArea',\n",
    " 'GarageQual_TA',\n",
    " 'GarageQual_Fa',\n",
    " 'GarageQual_Gd',\n",
    " 'GarageQual_Po',\n",
    " 'GarageCond_TA',\n",
    " 'GarageCond_Fa',\n",
    " 'GarageCond_Gd',\n",
    " 'GarageCond_Po',\n",
    " 'GarageCond_Ex',\n",
    " 'PavedDrive_Y',\n",
    " 'PavedDrive_N',\n",
    " 'PavedDrive_P',\n",
    " 'WoodDeckSF',\n",
    " 'OpenPorchSF',\n",
    " 'EnclosedPorch',\n",
    " '3SsnPorch',\n",
    " 'ScreenPorch',\n",
    " 'PoolArea',\n",
    " 'PoolQC_Ex',\n",
    " 'PoolQC_Gd',\n",
    " 'Fence_MnPrv',\n",
    " 'Fence_GdPrv',\n",
    " 'Fence_GdWo',\n",
    " 'Fence_MnWw',\n",
    " 'MiscFeature_Gar2',\n",
    " 'MiscFeature_Shed',\n",
    " 'MiscFeature_Othr',\n",
    " 'MiscVal',\n",
    " 'MoSold',\n",
    " 'YrSold',\n",
    " 'SaleType_WD',\n",
    " 'SaleType_COD',\n",
    " 'SaleType_New',\n",
    " 'SaleType_ConLD',\n",
    " 'SaleType_Oth',\n",
    " 'SaleType_Con',\n",
    " 'SaleType_ConLw',\n",
    " 'SaleType_ConLI',\n",
    " 'SaleType_CWD',\n",
    " 'SaleCondition_Normal',\n",
    " 'SaleCondition_Partial',\n",
    " 'SaleCondition_Abnorml',\n",
    " 'SaleCondition_Family',\n",
    " 'SaleCondition_Alloca',\n",
    " 'SaleCondition_AdjLand']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df_treino.drop('Id', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = treino['SalePrice']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_treino, X_teste, y_treino, y_teste = train_test_split(X, y, test_size=.30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [],
   "source": [
    "gboost = GradientBoostingRegressor(n_estimators = 1000, loss = 'huber')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GradientBoostingRegressor(alpha=0.9, criterion='friedman_mse', init=None,\n",
       "                          learning_rate=0.1, loss='huber', max_depth=3,\n",
       "                          max_features=None, max_leaf_nodes=None,\n",
       "                          min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                          min_samples_leaf=1, min_samples_split=2,\n",
       "                          min_weight_fraction_leaf=0.0, n_estimators=1000,\n",
       "                          n_iter_no_change=None, presort='auto',\n",
       "                          random_state=None, subsample=1.0, tol=0.0001,\n",
       "                          validation_fraction=0.1, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gboost.fit(X_treino, y_treino)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_treino = gboost.predict(X_teste)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x212307b5fc8>"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "plt.scatter(y_teste, pred_treino)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_log_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.12426823605678491"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_log_error(y_teste, pred_treino))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "modelo = gboost.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_teste = df_teste.select_dtypes(include=dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['MSSubClass', 'MSZoning_RH', 'MSZoning_RL', 'MSZoning_RM',\n",
       "       'MSZoning_FV', 'MSZoning_C (all)', 'LotArea', 'Street_Pave',\n",
       "       'Street_Grvl', 'Alley_Pave',\n",
       "       ...\n",
       "       'SaleType_Con', 'SaleType_ConLw', 'SaleType_ConLI', 'SaleType_CWD',\n",
       "       'SaleCondition_Normal', 'SaleCondition_Partial',\n",
       "       'SaleCondition_Abnorml', 'SaleCondition_Family', 'SaleCondition_Alloca',\n",
       "       'SaleCondition_AdjLand'],\n",
       "      dtype='object', length=267)"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_teste.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [],
   "source": [
    "p = modelo.predict(df_teste)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [],
   "source": [
    "sub = pd.Series(p, index=teste['Id'], name='SalePrice')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [],
   "source": [
    "sub.to_csv('modelo4.csv', header=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### MANIPULAÇÃO DE DADOS FALTANTES NA BASE DE TESTE ###"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "treino_novo = treino.select_dtypes(include=dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Id', 'MSSubClass', 'LotArea', 'OverallQual', 'OverallCond',\n",
       "       'YearBuilt', 'YearRemodAdd', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',\n",
       "       'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea',\n",
       "       'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr',\n",
       "       'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars',\n",
       "       'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n",
       "       'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold', 'SalePrice'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "treino_novo.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "teste_novo = teste.select_dtypes(include=dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Id', 'MSSubClass', 'LotArea', 'OverallQual', 'OverallCond',\n",
       "       'YearBuilt', 'YearRemodAdd', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF',\n",
       "       'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr',\n",
       "       'TotRmsAbvGrd', 'Fireplaces', 'WoodDeckSF', 'OpenPorchSF',\n",
       "       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n",
       "       'MoSold', 'YrSold'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "teste_novo.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "treino_novo = list(treino_novo)\n",
    "teste_novo = list(teste_novo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "lista_aplicar = ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath',  'GarageCars',\n",
    "       'GarageArea']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
